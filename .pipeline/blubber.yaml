version: v4

base: docker-registry.wikimedia.org/python3-buster:latest

runs:
  environment:
    PYTHONBUFFERED: "1"
    PYTHONDONTWRITEBYTECODE: "1"
    PIP_NO_CACHE_DIR: "off"
    PIP_DISABLE_PIP_VERSION_CHECK: "on"
    DJANGO_SETTINGS_MODULE: "toolhub.settings"

variants:
  base-python:
    # Provides the basic foundation for all other python runtime containers
    # needed to develop, test, and run Toolhub.
    apt:
      packages:
        - build-essential
        - default-libmysqlclient-dev
        - gettext
        - git
        - python3-dev
        - python3-pip  # FIXME: should be in the base image OR added by Blubber
        # The python3-venv package is needed to supply the `ensurepip`
        # command. Having ensurepip available is a requirement of Poetry.
        - python3-venv  # FIXME: should be in the base image OR added by Blubber
    python:
      version: python3
      poetry:
        version: ==1.3.1
      requirements:
        - pyproject.toml
        - poetry.lock

  dev-python:
    # Development/testing shared base for python runtime containers
    includes:
      - base-python
    runs:
      # Mark as insecure so that the runtime user can modify content. This is
      # needed so that we can use the container's runtime for our local
      # development needs such as updating poetry.lock and running tox.
      insecurely: true
    python:
      poetry:
        devel: true
    copies:
      - from: local
        source: .
        destination: .

  lint-python:
    # CI container: runs lint checks on Python code
    includes:
      - dev-python
    entrypoint:
      - sh
      - -c
      - >-
        poetry check &&
        poetry run flake8 &&
        poetry run black --check --diff . &&
        poetry run bandit -ii -r toolhub/

  test-python:
    # CI container: runs unit and integration tests on Python code
    includes:
      - dev-python
    entrypoint:
      - sh
      - -c
      - >-
        poetry run coverage run --branch manage.py test &&
        poetry run coverage report

  base-nodejs:
    # Provides the basic foundation for all other nodejs runtime containers
    # needed to develop and test Toolhub.
    base: docker-registry.wikimedia.org/releng/node14
    node:
      requirements:
        - package.json
        - package-lock.json
      env: development
    entrypoint:
      # Replace the upstream "npm" entrypoint with something that will act as
      # though there is no custom entry point at all.
      - /usr/bin/env

  dev-nodejs:
    # Development/testing shared base for nodejs runtime containers
    includes:
      - base-nodejs
    runs:
      # Mark as insecure so that the runtime user can modify content. This is
      # needed so that we can use the container's runtime for our local
      # development needs such as updating package-lock.json
      insecurely: true
    copies:
      - from: local
        source: .
        destination: .
      - from: local
        source: .git/
        destination: ./.git/

  lint-nodejs:
    # CI container: runs lint checks on nodejs code
    includes:
      - dev-nodejs
    entrypoint:
      - npm
      - run-script
      - lint

  test-nodejs:
    # CI container: runs unit and integration tests on nodejs code
    includes:
      - dev-nodejs
    entrypoint:
      - npm
      - run-script
      - unit

  local-python:
    # Local development Python runtime container including special support for
    # use with docker-compose.
    includes:
      - dev-python
    copies:
      - from: dockerize
        source: /srv/dockerize
        destination: /srv/dockerize

  dockerize:
    # Bulder container: downloads and unpacks the dockerize utility from
    # <https://github.com/jwilder/dockerize> to /srv/dockerize
    runs:
      environment:
        DOCKERIZE_VERSION: v0.6.1
    lives:
      in: /srv/dockerize/bin
    apt:
      packages:
        - ca-certificates
        - wget
    builder:
      command:
        - /bin/bash
        - -c
        - >-
          wget --no-verbose https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          && tar -C /srv/dockerize/bin -xzvf dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          && rm dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz

  oauth-client:
    # Trivial OAuth client application for local testing of Toolhub's built-in
    # OAuth authorization server.
    includes:
      - base-python
    python:
      requirements:
        - from: local
          source: contrib/oauth-client-example/pyproject.toml
          destination: ./
        - from: local
          source: contrib/oauth-client-example/poetry.lock
          destination: ./
    copies:
      - from: local
        source: contrib/oauth-client-example
        destination: ./
    entrypoint:
      - /bin/bash
      - -c
      - >-
        poetry run python3 -m flask run --host 0.0.0.0 --port 8000

  prep-nodejs:
    # Builder container: compiles Vue frontend code
    includes:
      - base-nodejs
    builder:
      requirements:
        - from: local
          source: vue.config.js
          destination: ./
        - from: local
          source: vue/
          destination: ./vue/
        - from: local
          source: .git/
          destination: ./.git/
      command:
        - /bin/bash
        - -c
        - >-
          ls -alh
          && npm run-script build:vue

  prep:
    # Builder container: compiles Django static assets and gettext files
    includes:
      - base-python
    runs:
      environment:
        DJANGO_SECRET_KEY: FAKE_SECRET_FOR_PREP_BUILD
        WIKIMEDIA_OAUTH2_KEY: FAKE_KEY_FOR_PREP_BUILD
        WIKIMEDIA_OAUTH2_SECRET: FAKE_TOKEN_FOR_PREP_BUILD
    builder:
      requirements:
        - from: local
          source: .
          destination: .
        - from: prep-nodejs
          source: /srv/app/vue/dist
          destination: ./vue/dist/
      command:
        - /bin/bash
        - -c
        - >-
          ls -alh
          && poetry run ./manage.py collectstatic -c --no-input
          && poetry run python3 -mjson.tool staticfiles/staticfiles.json > /tmp/staticfiles.json
          && mv /tmp/staticfiles.json staticfiles/staticfiles.json
          && poetry run ./manage.py compilemessages --exclude qqq

  production:
    includes:
      - base-python
    copies:
      - from: prep
        source: /srv/app
        destination: .
    entrypoint:
      - /usr/local/bin/poetry
      - run
      - python3
      - manage.py
      - runserver
      - --noreload
      - --nostatic
      - 0.0.0.0:8000

  demo:
    # Demonstration server: runs Toolhub in a single container with an
    # ephemeral sqlite3 database.
    includes:
      - production
    runs:
      environment:
        DB_NAME: /dev/shm/toolhub.sqlite3
    entrypoint:
      - /bin/bash
      - -c
      - >-
        poetry run python3 manage.py migrate
        && poetry run python3 manage.py createinitialrevisions
        && poetry run python3 manage.py loaddata toolhub/fixtures/demo.yaml
        && poetry run python3 manage.py crawl
        && poetry run python3 manage.py runserver --noreload --nostatic 0.0.0.0:8000
