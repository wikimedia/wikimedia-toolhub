---
version: "3.2"
services:
  web:
    build:
      context: .
      dockerfile: .pipeline/local-python.Dockerfile
    image: "toolhub:dev-python"
    # T295318: run container as local user to allow Linux mount writes
    user: "${LOCAL_UID}:${LOCAL_GID}"
    working_dir: /srv/app
    command: >
      /srv/dockerize/bin/dockerize -wait tcp://db:3306
      poetry run
      python3 manage.py runserver --nostatic 0.0.0.0:8000
    environment:
      - DJANGO_SECRET_KEY
      - DJANGO_DEBUG
      - DJANGO_ALLOWED_HOSTS
      - DJANGO_SETTINGS_MODULE=toolhub.settings
      - DJANGO_SUPERUSER_PASSWORD
      - LOGGING_CONSOLE_FORMATTER
      - LOGGING_HANDLERS
      - LOGGING_LEVEL
      - DB_ENGINE
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - DB_HOST
      - DB_PORT
      - CACHE_BACKEND
      - CACHE_LOCATION
      - WIKIMEDIA_OAUTH2_URL
      - WIKIMEDIA_OAUTH2_KEY
      - WIKIMEDIA_OAUTH2_SECRET
      - "ES_HOSTS=${ES_HOSTS:-search:9200}"
      - "FIREFOX_DEVTOOL_HACK=${FIREFOX_DEVTOOL_HACK:-false}"
    volumes:
      - type: bind
        source: .
        target: /srv/app
        consistency: cached
    ports:
      - "${TOOLHUB_HTTP_PORT:-8000}:8000"
    restart: always
    depends_on:
      - db
      - nodejs
      - search

  db:
    image: mariadb:10.4
    restart: always
    command:
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DOCKER_DB_MYSQL_ROOT_PASSWORD}
    volumes:
      - type: volume
        source: dbdata
        target: /var/lib/mysql
        consistency: consistent

  nodejs:
    build:
      context: .
      dockerfile: .pipeline/dev-nodejs.Dockerfile
    image: "toolhub:dev-nodejs"
    # T295318: run container as local user to allow Linux mount writes
    user: "${LOCAL_UID}:${LOCAL_GID}"
    working_dir: /srv/app
    command:
      # T295318: make a $HOME as $LOCAL_UID user so that npm has a place
      # to cache files with the ownership it expects.
      - bash
      - -c
      - >-
        mkdir -p /tmp/runtime-home &&
        export HOME=/tmp/runtime-home &&
        npm install &&
        npm run serve:vue
    volumes:
      - type: bind
        source: .
        target: /srv/app
        consistency: cached
    ports:
      - "${TOOLHUB_FRONTEND_PORT:-8001}:8001"

  search:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.14
    restart: always
    environment:
      node.name: es01
      cluster.name: es-toolhub
      discovery.type: single-node
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${TOOLHUB_SEARCH_PORT:-9200}:9200"
    volumes:
      - type: volume
        source: esdata
        target: /usr/share/elasticsearch/data
        consistency: cached

volumes:
  dbdata:
  esdata:
