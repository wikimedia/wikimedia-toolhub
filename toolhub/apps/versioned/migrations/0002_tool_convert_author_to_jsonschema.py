# Generated by Django 2.2.26 on 2022-02-08 16:49

import json
import logging

from django.db import migrations

from reversion.models import VersionQuerySet


logger = logging.getLogger(__name__)


def author_to_array(apps, schema_editor):
    """Convert legacy author string values to array format."""
    Version = apps.get_model("reversion", "Version")
    ContentType = apps.get_model("contenttypes", "ContentType")
    tool_ct = ContentType.objects.get(app_label="toolinfo", model="tool")
    qs = Version.objects.filter(content_type=tool_ct)
    for vers in qs.all():
        # Version.serialized_data is a JSON string expected to hold an array
        # of dicts of historic model data.
        old_data = vers.serialized_data
        old_objs = json.loads(old_data)
        if not isinstance(old_objs, list):
            # Doesn't look like we expect
            logger.warning("Expected serialized_data of %r to be a list", vers)
            continue
        changed = False
        for m in old_objs:
            was = m["fields"]["author"]
            if isinstance(was, str):
                m["fields"]["author"] = [
                    {"name": name.strip()} for name in was.split(",")
                ]
                changed = True
        if changed:
            vers.serialized_data = json.dumps(old_objs)
            vers.save()
            logger.info("Migrated author info of %r", vers)


def array_to_author(apps, schema_editor):
    """Revert from array format to string."""
    Version = apps.get_model("reversion", "Version")
    ContentType = apps.get_model("contenttypes", "ContentType")
    tool_ct = ContentType.objects.get(app_label="toolinfo", model="tool")
    qs = Version.objects.filter(content_type=tool_ct)
    for vers in qs.all():
        old_data = vers.serialized_data
        old_objs = json.loads(old_data)
        if not isinstance(old_objs, list):
            # Doesn't look like we expect
            logger.warning("Expected serialized_data of %r to be a list", vers)
            continue
        changed = False
        for m in old_objs:
            was = m["fields"]["author"]
            if isinstance(was, list):
                m["fields"]["author"] = ", ".join(
                    author["name"] for author in was
                )
                changed = True
        if changed:
            vers.serialized_data = json.dumps(old_objs)
            vers.save()
            logger.info("Reverted author info of %r", vers)


class Migration(migrations.Migration):

    dependencies = [
        ("versioned", "0001_initial"),
        ("toolinfo", "0015_author_to_jsonschema"),
    ]

    operations = [
        migrations.RunPython(author_to_array, array_to_author),
    ]
